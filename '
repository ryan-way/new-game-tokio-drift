use crossterm::{
    event::{DisableMouseCapture, EnableMouseCapture},
    execute,
    terminal::{disable_raw_mode, enable_raw_mode, EnterAlternateScreen, LeaveAlternateScreen},
};
use ratatui::{
    backend::CrosstermBackend,
    layout::{Alignment, Constraint},
    style::{Color, Modifier, Style},
    text::Span,
    widgets::{Block, BorderType, Borders, Cell, Paragraph, Row, Table},
    Terminal,
};
use std::{io, thread, time::Duration};

enum Token {
    X,
    O,
    Empty,
}

static O: &'static str = "███
█ █
███";

static X: &'static str = "█ █
 █ 
█ █";

static EMPTY: &'static str = "";

fn string_to_styled_cell(s: &str, idx: u8) -> Cell {
    Cell::from(s).style(
        Style::default()
            .bg(if idx % 2 != 0 {
                Color::DarkGray
            } else {
                Color::Black
            })
            .fg(Color::Gray),
    )
}

fn token_to_cell(token: &Token, idx: u8) -> Cell {
    string_to_styled_cell(
        match token {
            Token::O => O,
            Token::X => X,
            Token::Empty => EMPTY,
        },
        idx,
    )
}

fn tokens_to_row(tokens: &[Token; 3], idx: u8) -> Row {
    Row::new(vec![
        token_to_cell(&tokens[0], 0 + idx),
        token_to_cell(&tokens[1], 1 + idx),
        token_to_cell(&tokens[2], 2 + idx),
    ])
    .height(3)
}

fn main() -> Result<(), io::Error> {
    // setup terminal
    enable_raw_mode()?;
    let mut stdout = io::stdout();
    execute!(stdout, EnterAlternateScreen, EnableMouseCapture)?;
    let backend = CrosstermBackend::new(stdout);
    let mut terminal = Terminal::new(backend)?;

    terminal.draw(|f| {
        let block = Block::default()
            .title(Span::styled(
                "Tic Tac Toe",
                Style::default().add_modifier(Modifier::BOLD),
            ))
            .title_alignment(Alignment::Center)
            .borders(Borders::ALL)
            .border_type(BorderType::Rounded)
            .border_style(Style::default().fg(Color::White));

        f.render_widget(block, f.size());
        let size = ratatui::layout::Rect {
            x: f.size().width / 2 - 7,
            y: f.size().height / 2 - 7,
            width: 20,
            height: 20,
        };
        let table = Table::new(vec![
            tokens_to_row(&[Token::X, Token::O, Token::Empty], 0),
            tokens_to_row(&[Token::O, Token::Empty, Token::X], 1),
            tokens_to_row(&[Token::Empty, Token::O, Token::X], 2),
        ])
        .block(
            Block::default()
                .borders(Borders::ALL)
                .border_type(BorderType::Rounded),
        )
        .column_spacing(0)
        // .header(
        //     Row::new(vec!["1", "2", "3"])
        //         .style(Style::default().add_modifier(Modifier::BOLD))
        //         .height(1),
        // )
        .widths(&[
            Constraint::Length(3),
            Constraint::Length(3),
            Constraint::Length(3),
        ]);

        f.render_widget(table, size);
    })?;

    thread::sleep(Duration::from_millis(5000));

    // restore terminal
    disable_raw_mode()?;
    execute!(
        terminal.backend_mut(),
        LeaveAlternateScreen,
        DisableMouseCapture
    )?;
    terminal.show_cursor()?;

    Ok(())
}
